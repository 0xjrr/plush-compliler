
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTLEGEEQUALSNEleftPLUSMINUSleftTIMESDIVIDEMODrightNOTAND ASSIGN COLON COMMA DIVIDE ELSE EQUALS FALSE FLOAT FUNCTION GE GT IDENTIFIER IF LBRACE LE LPAREN LT MAIN MINUS MOD NE NOT NUMBER OR PLUS RBRACE RETURN RPAREN SEMICOLON STRING TIMES TRUE TYPE VAL VAR WHILEprogram : declaration_listdeclaration_list : declaration_list declaration\n                        | emptydeclaration : function_declaration\n                   | statementvariable_declaration : VAL IDENTIFIER COLON TYPE ASSIGN expression SEMICOLON\n                            | VAR IDENTIFIER COLON TYPE ASSIGN expression SEMICOLONfunction_declaration : FUNCTION IDENTIFIER LPAREN parameter_list RPAREN COLON TYPE statement_block\n                            | FUNCTION MAIN LPAREN parameter_list RPAREN COLON TYPE statement_blockparameter_list : parameter_list COMMA parameter\n                      | parameter\n                      | emptyparameter : IDENTIFIER COLON TYPEstatement_block : LBRACE statement_list RBRACEstatement_list : statement_list statement\n                      | emptystatement : variable_declaration\n                 | if_statement\n                 | while_statement\n                 | assignment_statement\n                 | expression_statement\n                 | return_statementreturn_statement : RETURN expression SEMICOLONif_statement : IF LPAREN expression RPAREN statement_block ELSE statement_block\n                    | IF LPAREN expression RPAREN statement_blockwhile_statement : WHILE LPAREN expression RPAREN statement_blockassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONexpression_statement : expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQUALS expression\n                  | expression NE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | LPAREN expression RPAREN\n                  | NOT expression\n                  | IDENTIFIER\n                  | NUMBER\n                  | FLOAT\n                  | STRING\n                  | TRUE\n                  | FALSE\n                  | function_callfunction_call : IDENTIFIER LPAREN expression_list RPARENexpression_list : expression_list COMMA expression\n                       | expressionempty :'
    
_lr_action_items = {'FUNCTION':([0,2,3,4,5,6,10,11,12,13,14,15,36,78,84,98,100,112,113,114,115,117,118,],[-54,7,-3,-2,-4,-5,-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-26,-6,-7,-24,-14,-8,-9,]),'VAL':([0,2,3,4,5,6,10,11,12,13,14,15,36,78,84,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,16,-3,-2,-4,-5,-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-54,-26,16,-16,-6,-7,-24,-14,-15,-8,-9,]),'VAR':([0,2,3,4,5,6,10,11,12,13,14,15,36,78,84,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,18,-3,-2,-4,-5,-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-54,-26,18,-16,-6,-7,-24,-14,-15,-8,-9,]),'IF':([0,2,3,4,5,6,10,11,12,13,14,15,36,78,84,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,19,-3,-2,-4,-5,-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-54,-26,19,-16,-6,-7,-24,-14,-15,-8,-9,]),'WHILE':([0,2,3,4,5,6,10,11,12,13,14,15,36,78,84,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,20,-3,-2,-4,-5,-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-54,-26,20,-16,-6,-7,-24,-14,-15,-8,-9,]),'IDENTIFIER':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,18,21,22,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,55,56,78,84,86,93,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,8,-3,-2,-4,-5,29,34,-17,-18,-19,-20,-21,-22,35,50,34,34,34,34,-28,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,79,79,-23,-27,34,79,34,34,-25,-54,-26,8,-16,-6,-7,-24,-14,-15,-8,-9,]),'RETURN':([0,2,3,4,5,6,10,11,12,13,14,15,36,78,84,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,21,-3,-2,-4,-5,-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-54,-26,21,-16,-6,-7,-24,-14,-15,-8,-9,]),'LPAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,19,20,21,22,29,30,31,32,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,78,84,86,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,9,-3,-2,-4,-5,32,9,-17,-18,-19,-20,-21,-22,51,52,9,9,55,56,9,9,32,-28,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-23,-27,9,9,9,-25,-54,-26,9,-16,-6,-7,-24,-14,-15,-8,-9,]),'NOT':([0,2,3,4,5,6,9,10,11,12,13,14,15,21,22,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,78,84,86,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,22,-3,-2,-4,-5,22,-17,-18,-19,-20,-21,-22,22,22,22,22,-28,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-23,-27,22,22,22,-25,-54,-26,22,-16,-6,-7,-24,-14,-15,-8,-9,]),'NUMBER':([0,2,3,4,5,6,9,10,11,12,13,14,15,21,22,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,78,84,86,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,23,-3,-2,-4,-5,23,-17,-18,-19,-20,-21,-22,23,23,23,23,-28,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-23,-27,23,23,23,-25,-54,-26,23,-16,-6,-7,-24,-14,-15,-8,-9,]),'FLOAT':([0,2,3,4,5,6,9,10,11,12,13,14,15,21,22,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,78,84,86,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,24,-3,-2,-4,-5,24,-17,-18,-19,-20,-21,-22,24,24,24,24,-28,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-23,-27,24,24,24,-25,-54,-26,24,-16,-6,-7,-24,-14,-15,-8,-9,]),'STRING':([0,2,3,4,5,6,9,10,11,12,13,14,15,21,22,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,78,84,86,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,25,-3,-2,-4,-5,25,-17,-18,-19,-20,-21,-22,25,25,25,25,-28,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-23,-27,25,25,25,-25,-54,-26,25,-16,-6,-7,-24,-14,-15,-8,-9,]),'TRUE':([0,2,3,4,5,6,9,10,11,12,13,14,15,21,22,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,78,84,86,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,26,-3,-2,-4,-5,26,-17,-18,-19,-20,-21,-22,26,26,26,26,-28,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-23,-27,26,26,26,-25,-54,-26,26,-16,-6,-7,-24,-14,-15,-8,-9,]),'FALSE':([0,2,3,4,5,6,9,10,11,12,13,14,15,21,22,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,78,84,86,96,97,98,99,100,108,109,112,113,114,115,116,117,118,],[-54,27,-3,-2,-4,-5,27,-17,-18,-19,-20,-21,-22,27,27,27,27,-28,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-23,-27,27,27,27,-25,-54,-26,27,-16,-6,-7,-24,-14,-15,-8,-9,]),'$end':([0,1,2,3,4,5,6,10,11,12,13,14,15,36,78,84,98,100,112,113,114,115,117,118,],[-54,0,-1,-3,-2,-4,-5,-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-26,-6,-7,-24,-14,-8,-9,]),'MAIN':([7,],[30,]),'ASSIGN':([8,87,88,],[31,96,97,]),'SEMICOLON':([8,17,23,24,25,26,27,28,34,53,54,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,85,105,106,],[-44,36,-45,-46,-47,-48,-49,-50,-44,78,-43,84,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-51,112,113,]),'PLUS':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,37,-45,-46,-47,-48,-49,-50,37,-44,37,-43,37,37,-42,-29,-30,-31,-32,-33,37,37,37,37,37,37,37,37,37,37,-51,37,37,37,]),'MINUS':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,38,-45,-46,-47,-48,-49,-50,38,-44,38,-43,38,38,-42,-29,-30,-31,-32,-33,38,38,38,38,38,38,38,38,38,38,-51,38,38,38,]),'TIMES':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,39,-45,-46,-47,-48,-49,-50,39,-44,39,-43,39,39,-42,39,39,-31,-32,-33,39,39,39,39,39,39,39,39,39,39,-51,39,39,39,]),'DIVIDE':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,40,-45,-46,-47,-48,-49,-50,40,-44,40,-43,40,40,-42,40,40,-31,-32,-33,40,40,40,40,40,40,40,40,40,40,-51,40,40,40,]),'MOD':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,41,-45,-46,-47,-48,-49,-50,41,-44,41,-43,41,41,-42,41,41,-31,-32,-33,41,41,41,41,41,41,41,41,41,41,-51,41,41,41,]),'GT':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,42,-45,-46,-47,-48,-49,-50,42,-44,42,-43,42,42,-42,-29,-30,-31,-32,-33,None,None,None,None,None,None,42,42,42,42,-51,42,42,42,]),'LT':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,43,-45,-46,-47,-48,-49,-50,43,-44,43,-43,43,43,-42,-29,-30,-31,-32,-33,None,None,None,None,None,None,43,43,43,43,-51,43,43,43,]),'GE':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,44,-45,-46,-47,-48,-49,-50,44,-44,44,-43,44,44,-42,-29,-30,-31,-32,-33,None,None,None,None,None,None,44,44,44,44,-51,44,44,44,]),'LE':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,45,-45,-46,-47,-48,-49,-50,45,-44,45,-43,45,45,-42,-29,-30,-31,-32,-33,None,None,None,None,None,None,45,45,45,45,-51,45,45,45,]),'EQUALS':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,46,-45,-46,-47,-48,-49,-50,46,-44,46,-43,46,46,-42,-29,-30,-31,-32,-33,None,None,None,None,None,None,46,46,46,46,-51,46,46,46,]),'NE':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,47,-45,-46,-47,-48,-49,-50,47,-44,47,-43,47,47,-42,-29,-30,-31,-32,-33,None,None,None,None,None,None,47,47,47,47,-51,47,47,47,]),'AND':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,48,-45,-46,-47,-48,-49,-50,48,-44,48,-43,48,48,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,48,48,48,48,-51,48,48,48,]),'OR':([8,17,23,24,25,26,27,28,33,34,53,54,57,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,85,95,105,106,],[-44,49,-45,-46,-47,-48,-49,-50,49,-44,49,-43,49,49,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,49,49,49,49,-51,49,49,49,]),'RBRACE':([10,11,12,13,14,15,36,78,84,98,99,100,108,109,112,113,114,115,116,],[-17,-18,-19,-20,-21,-22,-28,-23,-27,-25,-54,-26,115,-16,-6,-7,-24,-14,-15,]),'RPAREN':([23,24,25,26,27,28,33,34,54,55,56,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,80,81,82,83,85,95,101,103,],[-45,-46,-47,-48,-49,-50,60,-44,-43,-54,-54,85,-53,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,89,90,92,-11,-12,94,-51,-52,-13,-10,]),'COMMA':([23,24,25,26,27,28,34,54,55,56,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,80,81,82,83,85,95,101,103,],[-45,-46,-47,-48,-49,-50,-44,-43,-54,-54,86,-53,-42,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,93,-11,-12,93,-51,-52,-13,-10,]),'COLON':([35,50,79,92,94,],[61,75,91,102,104,]),'TYPE':([61,75,91,102,104,],[87,88,101,110,111,]),'LBRACE':([89,90,107,110,111,],[99,99,99,99,99,]),'ELSE':([98,115,],[107,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'empty':([0,55,56,99,],[3,82,82,109,]),'declaration':([2,],[4,]),'function_declaration':([2,],[5,]),'statement':([2,108,],[6,116,]),'variable_declaration':([2,108,],[10,10,]),'if_statement':([2,108,],[11,11,]),'while_statement':([2,108,],[12,12,]),'assignment_statement':([2,108,],[13,13,]),'expression_statement':([2,108,],[14,14,]),'return_statement':([2,108,],[15,15,]),'expression':([2,9,21,22,31,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,86,96,97,108,],[17,33,53,54,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,95,105,106,17,]),'function_call':([2,9,21,22,31,32,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,86,96,97,108,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'expression_list':([32,],[58,]),'parameter_list':([55,56,],[80,83,]),'parameter':([55,56,93,],[81,81,103,]),'statement_block':([89,90,107,110,111,],[98,100,114,117,118,]),'statement_list':([99,],[108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','grammar.py',13),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','grammar.py',17),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list','grammar.py',18),
  ('declaration -> function_declaration','declaration',1,'p_declaration','grammar.py',25),
  ('declaration -> statement','declaration',1,'p_declaration','grammar.py',26),
  ('variable_declaration -> VAL IDENTIFIER COLON TYPE ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','grammar.py',31),
  ('variable_declaration -> VAR IDENTIFIER COLON TYPE ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','grammar.py',32),
  ('function_declaration -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN COLON TYPE statement_block','function_declaration',8,'p_function_declaration','grammar.py',37),
  ('function_declaration -> FUNCTION MAIN LPAREN parameter_list RPAREN COLON TYPE statement_block','function_declaration',8,'p_function_declaration','grammar.py',38),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','grammar.py',45),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','grammar.py',46),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','grammar.py',47),
  ('parameter -> IDENTIFIER COLON TYPE','parameter',3,'p_parameter','grammar.py',56),
  ('statement_block -> LBRACE statement_list RBRACE','statement_block',3,'p_statement_block','grammar.py',60),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','grammar.py',64),
  ('statement_list -> empty','statement_list',1,'p_statement_list','grammar.py',65),
  ('statement -> variable_declaration','statement',1,'p_statement','grammar.py',73),
  ('statement -> if_statement','statement',1,'p_statement','grammar.py',74),
  ('statement -> while_statement','statement',1,'p_statement','grammar.py',75),
  ('statement -> assignment_statement','statement',1,'p_statement','grammar.py',76),
  ('statement -> expression_statement','statement',1,'p_statement','grammar.py',77),
  ('statement -> return_statement','statement',1,'p_statement','grammar.py',78),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','grammar.py',82),
  ('if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block','if_statement',7,'p_if_statement','grammar.py',86),
  ('if_statement -> IF LPAREN expression RPAREN statement_block','if_statement',5,'p_if_statement','grammar.py',87),
  ('while_statement -> WHILE LPAREN expression RPAREN statement_block','while_statement',5,'p_while_statement','grammar.py',94),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','grammar.py',98),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','grammar.py',102),
  ('expression -> expression PLUS expression','expression',3,'p_expression','grammar.py',107),
  ('expression -> expression MINUS expression','expression',3,'p_expression','grammar.py',108),
  ('expression -> expression TIMES expression','expression',3,'p_expression','grammar.py',109),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','grammar.py',110),
  ('expression -> expression MOD expression','expression',3,'p_expression','grammar.py',111),
  ('expression -> expression GT expression','expression',3,'p_expression','grammar.py',112),
  ('expression -> expression LT expression','expression',3,'p_expression','grammar.py',113),
  ('expression -> expression GE expression','expression',3,'p_expression','grammar.py',114),
  ('expression -> expression LE expression','expression',3,'p_expression','grammar.py',115),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','grammar.py',116),
  ('expression -> expression NE expression','expression',3,'p_expression','grammar.py',117),
  ('expression -> expression AND expression','expression',3,'p_expression','grammar.py',118),
  ('expression -> expression OR expression','expression',3,'p_expression','grammar.py',119),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','grammar.py',120),
  ('expression -> NOT expression','expression',2,'p_expression','grammar.py',121),
  ('expression -> IDENTIFIER','expression',1,'p_expression','grammar.py',122),
  ('expression -> NUMBER','expression',1,'p_expression','grammar.py',123),
  ('expression -> FLOAT','expression',1,'p_expression','grammar.py',124),
  ('expression -> STRING','expression',1,'p_expression','grammar.py',125),
  ('expression -> TRUE','expression',1,'p_expression','grammar.py',126),
  ('expression -> FALSE','expression',1,'p_expression','grammar.py',127),
  ('expression -> function_call','expression',1,'p_expression','grammar.py',128),
  ('function_call -> IDENTIFIER LPAREN expression_list RPAREN','function_call',4,'p_function_call','grammar.py',140),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','grammar.py',144),
  ('expression_list -> expression','expression_list',1,'p_expression_list','grammar.py',145),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',152),
]
