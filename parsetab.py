
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLTGTLEGEEQUALSNEleftPLUSMINUSleftTIMESDIVIDEMODleftANDORrightNOTleftBITWISE_NOTleftBITWISE_ANDleftBITWISE_ORleftBITWISE_XORleftBITWISE_LSHIFTBITWISE_RSHIFTAND ASSIGN BITWISE_AND BITWISE_LSHIFT BITWISE_NOT BITWISE_OR BITWISE_RSHIFT BITWISE_XOR COLON COMMA DIVIDE DO ELSE EQUALS FALSE FLOAT FUNCTION GE GT IDENTIFIER IF LBRACE LBRACKET LE LPAREN LT MAIN MINUS MOD NE NOT NUMBER OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING TIMES TRUE TYPE VAL VAR WHILEprogram : global_declaration_list declaration_list\n               | declaration_listglobal_declaration_list : global_declaration_list global_declaration\n                               | emptyglobal_declaration : variable_declarationdeclaration_list : declaration_list declaration\n                        | emptydeclaration : function_declaration\n                   | statementvariable_declaration : VAL IDENTIFIER COLON TYPE ASSIGN expression SEMICOLON\n                            | VAR IDENTIFIER COLON TYPE ASSIGN expression SEMICOLON\n                            | VAR IDENTIFIER COLON TYPE SEMICOLONfunction_declaration : FUNCTION IDENTIFIER LPAREN parameter_list RPAREN COLON TYPE statement_block\n                            | FUNCTION MAIN LPAREN parameter_list RPAREN COLON TYPE statement_blockparameter_list : parameter_list COMMA parameter\n                      | parameter\n                      | emptyparameter : IDENTIFIER COLON TYPEstatement_block : LBRACE statement_list RBRACEstatement_list : statement_list statement\n                      | emptystatement : variable_declaration\n                 | if_statement\n                 | while_statement\n                 | do_while_statement\n                 | assignment_statement\n                 | expression_statement\n                 | return_statementreturn_statement : RETURN expression SEMICOLON\n                        | RETURN SEMICOLONif_statement : IF LPAREN expression RPAREN statement_block ELSE statement_block\n                    | IF LPAREN expression RPAREN statement_blockwhile_statement : WHILE LPAREN expression RPAREN statement_block SEMICOLONdo_while_statement : DO statement_block WHILE LPAREN expression RPAREN SEMICOLONassignment_statement : IDENTIFIER ASSIGN expression SEMICOLONexpression_statement : expression SEMICOLONfunction_call : IDENTIFIER LPAREN expression_list RPARENexpression_list : expression_list COMMA expression\n                       | expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQUALS expression\n                  | expression NE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression BITWISE_AND expression\n                  | expression BITWISE_OR expression\n                  | expression BITWISE_XOR expression\n                  | expression BITWISE_NOT expression\n                  | expression BITWISE_LSHIFT expression\n                  | expression BITWISE_RSHIFT expression\n                  | LPAREN expression RPAREN\n                  | NOT expression\n                  | IDENTIFIER\n                  | NUMBER\n                  | FLOAT\n                  | STRING\n                  | TRUE\n                  | FALSE\n                  | function_callempty :'
    
_lr_action_items = {'VAL':([0,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,67,69,101,102,103,111,117,118,121,127,137,139,140,143,144,145,146,],[-68,9,9,-4,9,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,-68,-30,9,-21,-29,-35,-19,-20,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'VAR':([0,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,67,69,101,102,103,111,117,118,121,127,137,139,140,143,144,145,146,],[-68,10,10,-4,10,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,-68,-30,10,-21,-29,-35,-19,-20,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'FUNCTION':([0,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,69,103,111,117,121,127,137,139,140,143,144,145,146,],[-68,-68,14,-4,14,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,-30,-29,-35,-19,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'IF':([0,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,67,69,101,102,103,111,117,118,121,127,137,139,140,143,144,145,146,],[-68,-68,25,-4,25,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,-68,-30,25,-21,-29,-35,-19,-20,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'WHILE':([0,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,66,67,69,101,102,103,111,117,118,121,127,137,139,140,143,144,145,146,],[-68,-68,26,-4,26,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,100,-68,-30,26,-21,-29,-35,-19,-20,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'DO':([0,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,67,69,101,102,103,111,117,118,121,127,137,139,140,143,144,145,146,],[-68,-68,27,-4,27,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,-68,-30,27,-21,-29,-35,-19,-20,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,28,29,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,73,74,101,102,103,111,113,116,117,118,119,120,121,124,127,137,139,140,143,144,145,146,],[-68,-68,15,-4,15,-3,-7,-5,36,37,-6,-8,-9,38,43,-22,-23,-24,-25,-26,-27,-28,43,43,43,43,-36,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-68,-30,106,106,15,-21,-29,-35,43,43,-19,-20,43,43,-12,106,-32,-33,-10,-11,-31,-34,-13,-14,]),'RETURN':([0,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,67,69,101,102,103,111,117,118,121,127,137,139,140,143,144,145,146,],[-68,-68,28,-4,28,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,-68,-30,28,-21,-29,-35,-19,-20,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'LPAREN':([0,2,3,4,5,6,7,8,11,12,13,15,16,17,18,19,20,21,22,23,25,26,28,29,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,100,101,102,103,111,113,116,117,118,119,120,121,127,137,139,140,143,144,145,146,],[-68,-68,16,-4,16,-3,-7,-5,-6,-8,-9,41,16,-22,-23,-24,-25,-26,-27,-28,64,65,16,16,73,74,16,16,41,-36,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-68,-30,116,16,-21,-29,-35,16,16,-19,-20,16,16,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'NOT':([0,2,3,4,5,6,7,8,11,12,13,16,17,18,19,20,21,22,23,28,29,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,101,102,103,111,113,116,117,118,119,120,121,127,137,139,140,143,144,145,146,],[-68,-68,29,-4,29,-3,-7,-5,-6,-8,-9,29,-22,-23,-24,-25,-26,-27,-28,29,29,29,29,-36,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-68,-30,29,-21,-29,-35,29,29,-19,-20,29,29,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'NUMBER':([0,2,3,4,5,6,7,8,11,12,13,16,17,18,19,20,21,22,23,28,29,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,101,102,103,111,113,116,117,118,119,120,121,127,137,139,140,143,144,145,146,],[-68,-68,30,-4,30,-3,-7,-5,-6,-8,-9,30,-22,-23,-24,-25,-26,-27,-28,30,30,30,30,-36,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-68,-30,30,-21,-29,-35,30,30,-19,-20,30,30,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'FLOAT':([0,2,3,4,5,6,7,8,11,12,13,16,17,18,19,20,21,22,23,28,29,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,101,102,103,111,113,116,117,118,119,120,121,127,137,139,140,143,144,145,146,],[-68,-68,31,-4,31,-3,-7,-5,-6,-8,-9,31,-22,-23,-24,-25,-26,-27,-28,31,31,31,31,-36,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-68,-30,31,-21,-29,-35,31,31,-19,-20,31,31,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'STRING':([0,2,3,4,5,6,7,8,11,12,13,16,17,18,19,20,21,22,23,28,29,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,101,102,103,111,113,116,117,118,119,120,121,127,137,139,140,143,144,145,146,],[-68,-68,32,-4,32,-3,-7,-5,-6,-8,-9,32,-22,-23,-24,-25,-26,-27,-28,32,32,32,32,-36,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-68,-30,32,-21,-29,-35,32,32,-19,-20,32,32,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'TRUE':([0,2,3,4,5,6,7,8,11,12,13,16,17,18,19,20,21,22,23,28,29,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,101,102,103,111,113,116,117,118,119,120,121,127,137,139,140,143,144,145,146,],[-68,-68,33,-4,33,-3,-7,-5,-6,-8,-9,33,-22,-23,-24,-25,-26,-27,-28,33,33,33,33,-36,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-68,-30,33,-21,-29,-35,33,33,-19,-20,33,33,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'FALSE':([0,2,3,4,5,6,7,8,11,12,13,16,17,18,19,20,21,22,23,28,29,40,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,101,102,103,111,113,116,117,118,119,120,121,127,137,139,140,143,144,145,146,],[-68,-68,34,-4,34,-3,-7,-5,-6,-8,-9,34,-22,-23,-24,-25,-26,-27,-28,34,34,34,34,-36,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-68,-30,34,-21,-29,-35,34,34,-19,-20,34,34,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'$end':([0,1,2,3,4,5,6,7,8,11,12,13,17,18,19,20,21,22,23,44,69,103,111,117,121,127,137,139,140,143,144,145,146,],[-68,0,-68,-2,-4,-1,-3,-7,-5,-6,-8,-9,-22,-23,-24,-25,-26,-27,-28,-36,-30,-29,-35,-19,-12,-32,-33,-10,-11,-31,-34,-13,-14,]),'MAIN':([14,],[39,]),'ASSIGN':([15,104,105,],[40,119,120,]),'SEMICOLON':([15,24,28,30,31,32,33,34,35,43,68,70,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,105,112,117,128,130,131,138,],[-61,44,69,-62,-63,-64,-65,-66,-67,-61,103,-60,111,-59,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,121,-37,-19,137,139,140,144,]),'PLUS':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,45,-62,-63,-64,-65,-66,-67,45,-61,45,-60,45,45,-59,-40,-41,-42,-43,-44,45,45,45,45,45,45,-51,-52,-53,-54,-55,-56,-57,-58,45,45,-37,45,45,45,45,]),'MINUS':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,46,-62,-63,-64,-65,-66,-67,46,-61,46,-60,46,46,-59,-40,-41,-42,-43,-44,46,46,46,46,46,46,-51,-52,-53,-54,-55,-56,-57,-58,46,46,-37,46,46,46,46,]),'TIMES':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,47,-62,-63,-64,-65,-66,-67,47,-61,47,-60,47,47,-59,47,47,-42,-43,-44,47,47,47,47,47,47,-51,-52,-53,-54,-55,-56,-57,-58,47,47,-37,47,47,47,47,]),'DIVIDE':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,48,-62,-63,-64,-65,-66,-67,48,-61,48,-60,48,48,-59,48,48,-42,-43,-44,48,48,48,48,48,48,-51,-52,-53,-54,-55,-56,-57,-58,48,48,-37,48,48,48,48,]),'MOD':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,49,-62,-63,-64,-65,-66,-67,49,-61,49,-60,49,49,-59,49,49,-42,-43,-44,49,49,49,49,49,49,-51,-52,-53,-54,-55,-56,-57,-58,49,49,-37,49,49,49,49,]),'GT':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,50,-62,-63,-64,-65,-66,-67,50,-61,50,-60,50,50,-59,-40,-41,-42,-43,-44,None,None,None,None,None,None,-51,-52,-53,-54,-55,-56,-57,-58,50,50,-37,50,50,50,50,]),'LT':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,51,-62,-63,-64,-65,-66,-67,51,-61,51,-60,51,51,-59,-40,-41,-42,-43,-44,None,None,None,None,None,None,-51,-52,-53,-54,-55,-56,-57,-58,51,51,-37,51,51,51,51,]),'GE':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,52,-62,-63,-64,-65,-66,-67,52,-61,52,-60,52,52,-59,-40,-41,-42,-43,-44,None,None,None,None,None,None,-51,-52,-53,-54,-55,-56,-57,-58,52,52,-37,52,52,52,52,]),'LE':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,53,-62,-63,-64,-65,-66,-67,53,-61,53,-60,53,53,-59,-40,-41,-42,-43,-44,None,None,None,None,None,None,-51,-52,-53,-54,-55,-56,-57,-58,53,53,-37,53,53,53,53,]),'EQUALS':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,54,-62,-63,-64,-65,-66,-67,54,-61,54,-60,54,54,-59,-40,-41,-42,-43,-44,None,None,None,None,None,None,-51,-52,-53,-54,-55,-56,-57,-58,54,54,-37,54,54,54,54,]),'NE':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,55,-62,-63,-64,-65,-66,-67,55,-61,55,-60,55,55,-59,-40,-41,-42,-43,-44,None,None,None,None,None,None,-51,-52,-53,-54,-55,-56,-57,-58,55,55,-37,55,55,55,55,]),'AND':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,56,-62,-63,-64,-65,-66,-67,56,-61,56,-60,56,56,-59,56,56,56,56,56,56,56,56,56,56,56,-51,-52,-53,-54,-55,-56,-57,-58,56,56,-37,56,56,56,56,]),'OR':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,57,-62,-63,-64,-65,-66,-67,57,-61,57,-60,57,57,-59,57,57,57,57,57,57,57,57,57,57,57,-51,-52,-53,-54,-55,-56,-57,-58,57,57,-37,57,57,57,57,]),'BITWISE_AND':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,58,-62,-63,-64,-65,-66,-67,58,-61,58,58,58,58,-59,58,58,58,58,58,58,58,58,58,58,58,58,58,-53,-54,-55,58,-57,-58,58,58,-37,58,58,58,58,]),'BITWISE_OR':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,59,-62,-63,-64,-65,-66,-67,59,-61,59,59,59,59,-59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-54,-55,59,-57,-58,59,59,-37,59,59,59,59,]),'BITWISE_XOR':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,60,-62,-63,-64,-65,-66,-67,60,-61,60,60,60,60,-59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-55,60,-57,-58,60,60,-37,60,60,60,60,]),'BITWISE_NOT':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,61,-62,-63,-64,-65,-66,-67,61,-61,61,61,61,61,-59,61,61,61,61,61,61,61,61,61,61,61,61,61,-53,-54,-55,-56,-57,-58,61,61,-37,61,61,61,61,]),'BITWISE_LSHIFT':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,62,-62,-63,-64,-65,-66,-67,62,-61,62,62,62,62,-59,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-57,-58,62,62,-37,62,62,62,62,]),'BITWISE_RSHIFT':([15,24,30,31,32,33,34,35,42,43,68,70,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,112,126,129,130,131,],[-61,63,-62,-63,-64,-65,-66,-67,63,-61,63,63,63,63,-59,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-57,-58,63,63,-37,63,63,63,63,]),'RBRACE':([17,18,19,20,21,22,23,44,67,69,101,102,103,111,117,118,121,127,137,139,140,143,144,],[-22,-23,-24,-25,-26,-27,-28,-36,-68,-30,117,-21,-29,-35,-19,-20,-12,-32,-33,-10,-11,-31,-34,]),'LBRACE':([27,114,115,136,141,142,],[67,67,67,67,67,67,]),'RPAREN':([30,31,32,33,34,35,42,43,70,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,107,108,109,110,112,126,129,132,134,],[-62,-63,-64,-65,-66,-67,78,-61,-60,-68,-68,112,-39,-59,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,114,115,123,-16,-17,125,-37,-38,138,-18,-15,]),'COMMA':([30,31,32,33,34,35,43,70,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,107,108,109,110,112,126,132,134,],[-62,-63,-64,-65,-66,-67,-61,-60,-68,-68,113,-39,-59,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,124,-16,-17,124,-37,-38,-18,-15,]),'COLON':([36,37,106,123,125,],[71,72,122,133,135,]),'TYPE':([71,72,122,133,135,],[104,105,132,141,142,]),'ELSE':([117,127,],[-19,136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'declaration_list':([0,2,],[3,5,]),'empty':([0,2,67,73,74,],[4,7,102,109,109,]),'global_declaration':([2,],[6,]),'variable_declaration':([2,3,5,101,],[8,17,17,17,]),'declaration':([3,5,],[11,11,]),'function_declaration':([3,5,],[12,12,]),'statement':([3,5,101,],[13,13,118,]),'if_statement':([3,5,101,],[18,18,18,]),'while_statement':([3,5,101,],[19,19,19,]),'do_while_statement':([3,5,101,],[20,20,20,]),'assignment_statement':([3,5,101,],[21,21,21,]),'expression_statement':([3,5,101,],[22,22,22,]),'return_statement':([3,5,101,],[23,23,23,]),'expression':([3,5,16,28,29,40,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,101,113,116,119,120,],[24,24,42,68,70,75,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,24,126,129,130,131,]),'function_call':([3,5,16,28,29,40,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,101,113,116,119,120,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'statement_block':([27,114,115,136,141,142,],[66,127,128,143,145,146,]),'expression_list':([41,],[76,]),'statement_list':([67,],[101,]),'parameter_list':([73,74,],[107,110,]),'parameter':([73,74,124,],[108,108,134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list declaration_list','program',2,'p_program','grammar.py',21),
  ('program -> declaration_list','program',1,'p_program','grammar.py',22),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','grammar.py',30),
  ('global_declaration_list -> empty','global_declaration_list',1,'p_global_declaration_list','grammar.py',31),
  ('global_declaration -> variable_declaration','global_declaration',1,'p_global_declaration','grammar.py',38),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','grammar.py',42),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list','grammar.py',43),
  ('declaration -> function_declaration','declaration',1,'p_declaration','grammar.py',50),
  ('declaration -> statement','declaration',1,'p_declaration','grammar.py',51),
  ('variable_declaration -> VAL IDENTIFIER COLON TYPE ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','grammar.py',56),
  ('variable_declaration -> VAR IDENTIFIER COLON TYPE ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration','grammar.py',57),
  ('variable_declaration -> VAR IDENTIFIER COLON TYPE SEMICOLON','variable_declaration',5,'p_variable_declaration','grammar.py',58),
  ('function_declaration -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN COLON TYPE statement_block','function_declaration',8,'p_function_declaration','grammar.py',66),
  ('function_declaration -> FUNCTION MAIN LPAREN parameter_list RPAREN COLON TYPE statement_block','function_declaration',8,'p_function_declaration','grammar.py',67),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','grammar.py',74),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','grammar.py',75),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','grammar.py',76),
  ('parameter -> IDENTIFIER COLON TYPE','parameter',3,'p_parameter','grammar.py',85),
  ('statement_block -> LBRACE statement_list RBRACE','statement_block',3,'p_statement_block','grammar.py',89),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','grammar.py',93),
  ('statement_list -> empty','statement_list',1,'p_statement_list','grammar.py',94),
  ('statement -> variable_declaration','statement',1,'p_statement','grammar.py',102),
  ('statement -> if_statement','statement',1,'p_statement','grammar.py',103),
  ('statement -> while_statement','statement',1,'p_statement','grammar.py',104),
  ('statement -> do_while_statement','statement',1,'p_statement','grammar.py',105),
  ('statement -> assignment_statement','statement',1,'p_statement','grammar.py',106),
  ('statement -> expression_statement','statement',1,'p_statement','grammar.py',107),
  ('statement -> return_statement','statement',1,'p_statement','grammar.py',108),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','grammar.py',112),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','grammar.py',113),
  ('if_statement -> IF LPAREN expression RPAREN statement_block ELSE statement_block','if_statement',7,'p_if_statement','grammar.py',120),
  ('if_statement -> IF LPAREN expression RPAREN statement_block','if_statement',5,'p_if_statement','grammar.py',121),
  ('while_statement -> WHILE LPAREN expression RPAREN statement_block SEMICOLON','while_statement',6,'p_while_statement','grammar.py',128),
  ('do_while_statement -> DO statement_block WHILE LPAREN expression RPAREN SEMICOLON','do_while_statement',7,'p_do_while_statement','grammar.py',132),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','grammar.py',136),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','grammar.py',140),
  ('function_call -> IDENTIFIER LPAREN expression_list RPAREN','function_call',4,'p_function_call','grammar.py',144),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','grammar.py',149),
  ('expression_list -> expression','expression_list',1,'p_expression_list','grammar.py',150),
  ('expression -> expression PLUS expression','expression',3,'p_expression','grammar.py',157),
  ('expression -> expression MINUS expression','expression',3,'p_expression','grammar.py',158),
  ('expression -> expression TIMES expression','expression',3,'p_expression','grammar.py',159),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','grammar.py',160),
  ('expression -> expression MOD expression','expression',3,'p_expression','grammar.py',161),
  ('expression -> expression GT expression','expression',3,'p_expression','grammar.py',162),
  ('expression -> expression LT expression','expression',3,'p_expression','grammar.py',163),
  ('expression -> expression GE expression','expression',3,'p_expression','grammar.py',164),
  ('expression -> expression LE expression','expression',3,'p_expression','grammar.py',165),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','grammar.py',166),
  ('expression -> expression NE expression','expression',3,'p_expression','grammar.py',167),
  ('expression -> expression AND expression','expression',3,'p_expression','grammar.py',168),
  ('expression -> expression OR expression','expression',3,'p_expression','grammar.py',169),
  ('expression -> expression BITWISE_AND expression','expression',3,'p_expression','grammar.py',170),
  ('expression -> expression BITWISE_OR expression','expression',3,'p_expression','grammar.py',171),
  ('expression -> expression BITWISE_XOR expression','expression',3,'p_expression','grammar.py',172),
  ('expression -> expression BITWISE_NOT expression','expression',3,'p_expression','grammar.py',173),
  ('expression -> expression BITWISE_LSHIFT expression','expression',3,'p_expression','grammar.py',174),
  ('expression -> expression BITWISE_RSHIFT expression','expression',3,'p_expression','grammar.py',175),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','grammar.py',176),
  ('expression -> NOT expression','expression',2,'p_expression','grammar.py',177),
  ('expression -> IDENTIFIER','expression',1,'p_expression','grammar.py',178),
  ('expression -> NUMBER','expression',1,'p_expression','grammar.py',179),
  ('expression -> FLOAT','expression',1,'p_expression','grammar.py',180),
  ('expression -> STRING','expression',1,'p_expression','grammar.py',181),
  ('expression -> TRUE','expression',1,'p_expression','grammar.py',182),
  ('expression -> FALSE','expression',1,'p_expression','grammar.py',183),
  ('expression -> function_call','expression',1,'p_expression','grammar.py',184),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',214),
]
